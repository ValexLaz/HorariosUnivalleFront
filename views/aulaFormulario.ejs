<form id="formulario" class="classroom" action="/agregar-aula" method="POST">
    <div class="mb-3">
        <label for="code" class="form-label">Código</label>
        <input type="text" class="form-control" id="code" name="code" required>
    </div>
    <div class="mb-3">
        <label for="classroom_type" class="form-label">Tipo de Aula</label>
        <select class="form-select" id="id_classroom_type" name="classroom_type" required>
            <option value="null"> Selecciona una opcion</option>
        </select>
    </div>
    <div class="mb-3">
        <label for="description" class="form-label">Descripción</label>
        <textarea class="form-control" id="description" name="description" rows="3" required></textarea>
    </div>
    <div class="mb-3">
        <label for="building" class="form-label">Edificio</label>
        <select class="form-select" id="id_building" name="building" required>
            <option value="null"> Selecciona una opcion</option>
        </select>
    </div>
    <button type="submit" class="btn btn-primary">Agregar Aula</button>
</form>
<script type="module">
    import RepositoryAPI from './js/RepositoryAPI.js';
    
    async function getDetailsByBuilding() {
        const repoAPI = new RepositoryAPI('building');
        const response = await repoAPI.getAll();
        const selectContainer = $('#id_building');
        console.log(response.data);
        response.data.forEach(building => {
            const option = $('<option>').attr({
                value: building._id
            }).text(`${building.name}`);

            selectContainer.append(option);
        });
    }

    async function getDetailsByTypeClassroom(){
        const repoAPI = new RepositoryAPI('classroom/types');
        const response = await repoAPI.getAll();
        const selectContainer = $('#id_classroom_type');
        console.log(response.data);
        response.data.forEach(type_classroom => {
            const option = $('<option>').attr({
                value: type_classroom._id
            }).text(`${type_classroom.name}`);

            selectContainer.append(option);
        });
    }
    
    $(document).ready(async function () {
        console.log("Document Ready");
        await getDetailsByTypeClassroom();
        await getDetailsByBuilding(); 
    });

</script>

<script>
    // Función para vaciar el formulario y mostrar el mensaje de guardado
    function vaciarFormularioMostrarMensaje() {
      // Vaciar el formulario
      document.getElementById("formulario").reset();
 
      // Mostrar el mensaje de guardado correctamente
      const mensaje = document.createElement('div');
      mensaje.textContent = 'Guardado correctamente';
      mensaje.style.cssText = 'position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: rgba(0, 255, 0, 0.7); padding: 20px; border-radius: 8px; color: black; display: none;';
      document.body.appendChild(mensaje);
 
      mensaje.style.display = 'block';
      setTimeout(function() {
        mensaje.style.display = 'none';
      }, 3000); // Ocultar el mensaje después de 3 segundos (ajusta según sea necesario)
    }
 
    // Función para ejecutar la lógica de guardado
    function guardarDatos() {
      // Aquí iría tu lógica de guardado, por ejemplo, una llamada a tu API o proceso de almacenamiento
   
      // Una vez que hayas realizado tu lógica de guardado, puedes vaciar el formulario y mostrar el mensaje
      vaciarFormularioMostrarMensaje();
    }
 
    // Evento que se dispara al enviar el formulario
    document.getElementById("formulario").addEventListener("submit", function(event) {
      event.preventDefault(); // Evitar el envío predeterminado del formulario
   
      // Llamar a la función para guardar después de un breve retraso
      setTimeout(guardarDatos, 100); // Ejecutar la lógica de guardado después de 100 milisegundos
    });
  </script>