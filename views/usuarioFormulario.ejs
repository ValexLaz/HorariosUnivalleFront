<div class="card-header">
    <h3>usuario</h3>
</div>
<form id="formulario" class="user" action="/agregar-usuario" method="POST">
    <div class="mb-3">
        <label for="name" class="form-label">Nombre</label>
        <input type="text" class="form-control" id="name" name="name" required>
    </div>
    <div class="mb-3">
        <label for="last_name" class="form-label">Apellido</label>
        <input type="text" class="form-control" id="last_name" name="last_name" required>
    </div>
    <div class="mb-3">
        <label for="email" class="form-label">Correo Electrónico</label>
        <input type="email" class="form-control" id="email" name="email" required>
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">Contraseña</label>
        <input type="password" class="form-control" id="password" name="password" required>
    </div>
    <div class="mb-3">
        <label for="user_type" class="form-label">Tipo de Usuario</label>
        <select class="form-select" id="user_type" name="user_type" required>
            <option value="null"> Selecciona una opcion</option>
            <option value="admin">Administrador</option>
            <option value="head_of_faculty">Director de Carrera</option>
        </select>
    </div>
    <div class="mb-3">
        <label for="university_program_id" class="form-label">Programa Universitario</label>
        <select class="form-select" dependency="uniProgram" id="university_program_id" name="university_program_id"
            required>
            <option value="null">Seleccione una opcion</option>
        </select>
    </div>

    <button type="submit" class="btn btn-primary">Agregar Usuario</button>
</form>
<script type="module">
    import RepositoryAPI from './js/RepositoryAPI.js';

    async function loadSectionOfSelection() {
        const repoAPI = new RepositoryAPI();

        var selectedOption = $(this).val();
        let collection = $(this).attr('dependency');

        repoAPI.setCollection("uniPrograms");
        const response = await repoAPI.getAll();
        const selectContainer = $("#formulario").find(`#university_program_id`);
        selectContainer.find('option:not(:first-child)').remove();
        response.data.forEach(campo => {
            const option = $('<option>').attr({
                value: campo._id
            }).text(`${campo.name}`);
            selectContainer.append(option);
        });
    }
    $(document).ready(async function () {
        await loadSectionOfSelection()
    })
</script>
<script>
    // Función para vaciar el formulario y mostrar el mensaje de guardado
    function vaciarFormularioMostrarMensaje() {
        // Vaciar el formulario
        document.getElementById("formulario").reset();

        // Mostrar el mensaje de guardado correctamente
        const mensaje = document.createElement('div');
        mensaje.textContent = 'Guardado correctamente';
        mensaje.style.cssText = 'position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: rgba(0, 255, 0, 0.7); padding: 20px; border-radius: 8px; color: black; display: none;';
        document.body.appendChild(mensaje);

        mensaje.style.display = 'block';
        setTimeout(function () {
            mensaje.style.display = 'none';
        }, 3000); // Ocultar el mensaje después de 3 segundos (ajusta según sea necesario)
    }

    // Función para ejecutar la lógica de guardado
    function guardarDatos() {
        // Aquí iría tu lógica de guardado, por ejemplo, una llamada a tu API o proceso de almacenamiento

        // Una vez que hayas realizado tu lógica de guardado, puedes vaciar el formulario y mostrar el mensaje
        vaciarFormularioMostrarMensaje();
    }

    // Evento que se dispara al enviar el formulario
    document.getElementById("formulario").addEventListener("submit", function (event) {
        event.preventDefault(); // Evitar el envío predeterminado del formulario

        // Llamar a la función para guardar después de un breve retraso
        setTimeout(guardarDatos, 100); // Ejecutar la lógica de guardado después de 100 milisegundos
    });
</script>