<form id="formulario" class="uniPrograms" action="/agregar-programa-universitario" method="POST">
    <div class="mb-3">
        <label for="nombrePrograma" class="form-label">Siglas del Programa</label>
        <input type="text" class="form-control" id="nombrePrograma" name="name" required>
    </div>
    <div class="mb-3">
        <label for="descripcionPrograma" class="form-label">Nombre del Programa</label>
        <textarea class="form-control" id="descripcionPrograma" name="description" required></textarea>
    </div>
    <div id='RadioButtonContainer' class="mb-3">
        <label for="facultyId" class="form-label">Facultad</label>
    </div>
    <button type="submit" class="btn btn-primary">Agregar Programa Universitario</button>
</form>
<script type="module" src="js/RepositoryAPI.js"></script>
<script type="module">
    import RepositoryAPI from './js/RepositoryAPI.js';
    const repoAPI = new RepositoryAPI('faculty');

    async function getDetailsByFaculties() {
        const response = await repoAPI.getAll();
        const radioContainer = $('#RadioButtonContainer');
        console.log("faculties:");
        console.log(response.data);
        response.data.forEach(faculty => {
            const radioDiv = $('<div>').addClass('form-check');
            const radioInput = $('<input>').attr({
                type: 'radio',
                class: 'form-check-input',
                id: `faculty_${faculty._id}`, // ID único para cada radio
                name: 'faculty', // Mismo nombre para todos los radios
                value: faculty._id
            });
            const radioLabel = $('<label>')
                .addClass('form-check-label')
                .attr('for', `faculty_${faculty._id}`) // Hacer referencia al ID del radio
                .text(`${faculty.name}`);

            radioDiv.append(radioInput, radioLabel);
            radioContainer.append(radioDiv);
        });
    }

    $(document).ready(function () {
        getDetailsByFaculties();
    });
</script>

<script>
    // Función para vaciar el formulario y mostrar el mensaje de guardado
    function vaciarFormularioMostrarMensaje() {
      // Vaciar el formulario
      document.getElementById("formulario").reset();
 
      // Mostrar el mensaje de guardado correctamente
      const mensaje = document.createElement('div');
      mensaje.textContent = 'Guardado correctamente';
      mensaje.style.cssText = 'position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: rgba(0, 255, 0, 0.7); padding: 20px; border-radius: 8px; color: black; display: none;';
      document.body.appendChild(mensaje);
 
      mensaje.style.display = 'block';
      setTimeout(function() {
        mensaje.style.display = 'none';
      }, 3000); // Ocultar el mensaje después de 3 segundos (ajusta según sea necesario)
    }
 
    // Función para ejecutar la lógica de guardado
    function guardarDatos() {
      // Aquí iría tu lógica de guardado, por ejemplo, una llamada a tu API o proceso de almacenamiento
   
      // Una vez que hayas realizado tu lógica de guardado, puedes vaciar el formulario y mostrar el mensaje
      vaciarFormularioMostrarMensaje();
    }
 
    // Evento que se dispara al enviar el formulario
    document.getElementById("formulario").addEventListener("submit", function(event) {
      event.preventDefault(); // Evitar el envío predeterminado del formulario
   
      // Llamar a la función para guardar después de un breve retraso
      setTimeout(guardarDatos, 100); // Ejecutar la lógica de guardado después de 100 milisegundos
    });
  </script>