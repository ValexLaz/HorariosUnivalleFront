<style>
  .bd-placeholder-img {
    font-size: 1.125rem;
    text-anchor: middle;
    -webkit-user-select: none;
    -moz-user-select: none;
    user-select: none;
  }

  @media (min-width: 768px) {
    .bd-placeholder-img-lg {
      font-size: 3.5rem;
    }
  }

  .b-example-divider {
    height: 3rem;
    background-color: rgba(0, 0, 0, .1);
    border: solid rgba(0, 0, 0, .15);
    border-width: 1px 0;
    box-shadow: inset 0 .5em 1.5em rgba(0, 0, 0, .1), inset 0 .125em .5em rgba(0, 0, 0, .15);
  }

  .b-example-vr {
    flex-shrink: 0;
    width: 1.5rem;
    height: 100vh;
  }

  .bi {
    vertical-align: -.125em;
    fill: currentColor;
  }

  .nav-scroller {
    position: relative;
    z-index: 2;
    height: 2.75rem;
    overflow-y: hidden;
  }

  .nav-scroller .nav {
    display: flex;
    flex-wrap: nowrap;
    padding-bottom: 1rem;
    margin-top: -1px;
    overflow-x: auto;
    text-align: center;
    white-space: nowrap;
    -webkit-overflow-scrolling: touch;
  }

  #register-parent {
    height: auto;
  }

  .list-group-item.selected {
    background-color: #7433c4;
    color: #fff;
  }

  .list-group-item.selected.subItem {
    background-color: #a26bea;
    color: #fff;
  }

</style>

<!-- Contenido principal -->
<div id="register-parent" class="container mt-4 mb-4">
  <div class="row">
    <div class="col-md-3">
      <div class="list-group">
        <% if (user.admin ) { %>
          <a href="#" class="list-group-item list-group-item-action formulario-link " id="user">Usuario</a>
          <a href="#" class="list-group-item list-group-item-action formulario-link " id="faculty">Facultad</a>
          <a href="#" class="list-group-item list-group-item-action formulario-link  " id="uniPrograms">Carrera</a>
          <a href="#" class="list-group-item list-group-item-action formulario-link " id="class">Materia</a>
          <a href="#" class="list-group-item list-group-item-action formulario-link " id="semester">Semestre</a>
          <a href="#" class="list-group-item list-group-item-action formulario-link " id="classroom">Aula</a>
          <a href="#" class="list-group-item list-group-item-action formulario-link " id="classroom/types">Tipo Aula</a>
          <a href="#" class="list-group-item list-group-item-action formulario-link " id="building">Modulo</a>
          <a href="#" class="list-group-item list-group-item-action formulario-link " id="professor">Docente</a>

          <% } else if(user.head_of_faculty) { %>

            <a href="#" class="list-group-item list-group-item-action formulario-link " id="professor">Docente</a>

            <% } %>
      </div>
    </div>

    <div class="col-md-9">
      <div class="card">
        <div class="card-body" id="respuesta-container">
          <h5 class="card-title">"Selecciona una opcion para registrar"</h5>
        </div>
      </div>
    </div>
  </div>
  <div class="row">
    <!-- Ejemplo de tabla -->
    <div class="card mt-4" id="tabla-container">
      <div class="card-body">
        <h5 class="card-title"></h5>
      </div>
    </div>
  </div>
</div>

<script>
  $(document).ready(function () {
    $('.list-group-item').click(function () {
      $('.list-group-item').removeClass('selected');
      $(this).addClass('selected');
    });

    $(document).on('click', '.list-group-item.subItem', function () {
      $('.list-group-item.subItem').removeClass('selected');
      $(this).addClass('selected');
    });

  });
</script>

<script type="module">
  //Aprox de 189 lineas  o mas antes de refactorizar
  import RepositoryAPI from './js/RepositoryAPI.js';
  import Modal from './js/UI/Modal.js'
  import Table from './js/UI/Table.js'
  import Form from './js/UI/Form.js'

  const repoAPI = new RepositoryAPI();
  const tableManager = new Table({
    container: "tabla-container"
  });
  let formData = {};
  let status = 0;
  let actualRecord = {}

  $(document).ready(function () {

    $(document).on('click', '.formulario-link', async function (event) {
      event.preventDefault();
      var typeForm = $(this).attr("id");
      let child = $(this).attr("child");
      repoAPI.setCollection(typeForm);

      $.get(`/${typeForm}Form`, { typeForm: typeForm }, function (data) {
        const form = new Form({
          formHtml: data,
          group: typeForm,
          container: child || "#respuesta-container"
        })
        form.initializeEventSubmit(async function (event)  {
          event.preventDefault();
          formData = form.generateJSONFromInputs({
            form: this
          });

          switch (form.class) {
            case "professor":
              const records = await repoAPI.post({
                name: formData.name,
                email: formData.email,
                ci_number: formData.ci_number
              }, "findAllByParams")
              
              if (records.data.length != 0) {
                status = 1;
                new Modal(tableManager.generarTablaDesdeJSON({
                  jsonData: records.data,
                  withActionsCRUD: false,
                  returnTableHtml: true
                }))
              }
              break;
            case "professor/class":
              formData.professor = actualRecord._id;
            case "time/avails":
              formData.professor = actualRecord._id;
            default:
              break;
          }
          if (status !== 0) {
            status = 0;
            return;
          };
          const response = await repoAPI.post(formData);
          tableManager.addRowToTable(response.data);
        });
        form.render();
      });

      const response = await repoAPI.getAll();
      tableManager.generarTablaDesdeJSON({
        jsonData: response.data
      });
    });


    $("#tabla-container").on("click", ".editar", function (event) {
      event.preventDefault();
      event.stopPropagation();
      var $row = $(this).closest("tr");
      var rowIndex = $row.index();
      let originalContent = {};
      originalContent[rowIndex] = {};
      $row.find(".editable").each(function () {
        var $cell = $(this);
        var header = $row.closest("table").find("th").eq($cell.index()).text(); // Obtener el texto del encabezado correspondiente a esta celda
        originalContent[rowIndex][header] = $cell.html(); // Almacenar el contenido de la celda usando el texto del encabezado como clave
      });
      $row.find(".editable").attr("contenteditable", "true");
    });

    $("#tabla-container").on("click", ".guardar", async function (event) {
      event.preventDefault();
      event.stopPropagation();
      let $row = $(this).closest("tr");
      let rowId = $row.attr('id');
      let rowIndex = $row.index();
      let newContent = {};
      $row.find(".editable").each(function () {
        let $cell = $(this);
        let header = $row.closest("table").find("th").eq($cell.index()).text();
        newContent[header] = $cell.html();
      });
      const response = await repoAPI.updateByID(newContent, rowId);
      $row.find(".editable").removeAttr("contenteditable");
    });

    $("#tabla-container").on("click", ".eliminar", async function (event) {
      event.preventDefault();
      event.stopPropagation();
      let $row = $(this).closest("tr");
      let rowId = $row.attr('id');
      const response = await repoAPI.deleteByID(rowId);
      console.log(response);
      $(this).closest("tr").remove();
    });

    $("#tabla-container").on("click", "tr", async function (event) {
      var $target = $(event.target);
      if ($target.closest(".dropdown").length) {
        return;
      }
      console.log("Nueva vista");
      try {
        const response = await fetch(`/section/${repoAPI.collection}`);
        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }

        let jsonData = '<div class="json-data card"><div class="card-body"><h5 class="card-title">Docente</h5><ul class="list-group">';
        let $row = $(this).closest("tr");

        $row.find(".editable").each(function () {
          let $cell = $(this);
          let header = $row.closest("table").find("th").eq($cell.index()).text();
          let value = $cell.html();
          console.log(value);
          console.log(header);
          jsonData += `<li class="list-group-item"><strong>${header}:</strong> ${value}</li>`;
        });
        actualRecord = {};
        $row.find(".editable").each(function () {
          let $cell = $(this);
          let header = $row.closest("table").find("th").eq($cell.index()).text();
          actualRecord[header] = $cell.html();
        });
        actualRecord._id = $row.attr('id');

        jsonData += '</ul></div></div>';
        const data = await response.text();
        $("#respuesta-container").html(jsonData + data);

        tableManager.deleteTable()
      } catch (error) {
        console.error(error);
      }
    });

  });


</script>