<style>
  .bd-placeholder-img {
    font-size: 1.125rem;
    text-anchor: middle;
    -webkit-user-select: none;
    -moz-user-select: none;
    user-select: none;
  }

  @media (min-width: 768px) {
    .bd-placeholder-img-lg {
      font-size: 3.5rem;
    }
  }

  .b-example-divider {
    height: 3rem;
    background-color: rgba(0, 0, 0, .1);
    border: solid rgba(0, 0, 0, .15);
    border-width: 1px 0;
    box-shadow: inset 0 .5em 1.5em rgba(0, 0, 0, .1), inset 0 .125em .5em rgba(0, 0, 0, .15);
  }

  .b-example-vr {
    flex-shrink: 0;
    width: 1.5rem;
    height: 100vh;
  }

  .bi {
    vertical-align: -.125em;
    fill: currentColor;
  }

  .nav-scroller {
    position: relative;
    z-index: 2;
    height: 2.75rem;
    overflow-y: hidden;
  }

  .nav-scroller .nav {
    display: flex;
    flex-wrap: nowrap;
    padding-bottom: 1rem;
    margin-top: -1px;
    overflow-x: auto;
    text-align: center;
    white-space: nowrap;
    -webkit-overflow-scrolling: touch;
  }

  #register-parent {
    height: auto;
  }

  .list-group-item.selected {
    background-color: #7433c4;
    color: #fff;
  }

  .list-group-item.selected.subItem {
    background-color: #a26bea;
    color: #fff;
  }

  /*   tr[id]:hover {
    background-color: #a26bea;
    color: white;
  } */
</style>



<!-- Contenido principal -->
<div id="register-parent" class="container mt-4 mb-4">
  <div class="row">
    <div class="col-md-3">
      <div class="list-group">
        <a href="#" class="list-group-item list-group-item-action formulario-link " id="user">Usuario</a>
        <a href="#" class="list-group-item list-group-item-action formulario-link " id="faculty">Facultad</a>
        <a href="#" class="list-group-item list-group-item-action formulario-link  " id="uniPrograms">Carrera</a>
        <a href="#" class="list-group-item list-group-item-action formulario-link " id="class">Materia</a>
        <a href="#" class="list-group-item list-group-item-action formulario-link " id="semester">Semestre</a>
        <a href="#" class="list-group-item list-group-item-action formulario-link " id="classroom">Aula</a>
        <a href="#" class="list-group-item list-group-item-action formulario-link " id="classroom/types">Tipo Aula</a>
        <a href="#" class="list-group-item list-group-item-action formulario-link " id="building">Modulo</a>
        <a href="#" class="list-group-item list-group-item-action formulario-link " id="professor">Docente</a>
      </div>
    </div>

    <div class="col-md-9">
      <div class="card">
        <div class="card-body" id="respuesta-container">
          <h5 class="card-title">"Selecciona una opcion para registrar"</h5>
        </div>
      </div>
    </div>
  </div>
  <div class="row">
    <!-- Ejemplo de tabla -->
    <div class="card mt-4" id="tabla-container">
      <div class="card-body">
        <h5 class="card-title"></h5>
      </div>
    </div>
  </div>
</div>

<script>
  $(document).ready(function () {
    $('.list-group-item').click(function () {
      $('.list-group-item').removeClass('selected');
      $(this).addClass('selected');
    });

    $(document).on('click', '.list-group-item.subItem', function () {
      $('.list-group-item.subItem').removeClass('selected');
      $(this).addClass('selected');
    });

  });
</script>
<script type="module">
  //Aprox de 189 lineas  o mas antes de refactorizar
  import RepositoryAPI from './js/RepositoryAPI.js';
  class TableManager {

    constructor({
      container = ""
    }) {
      this.container = document.getElementById(container);
    }

    static addRowToTable() {

    }

    generarTablaDesdeJSON({
      jsonData = {},
      withActionsCRUD = true,
      returnTableHtml = false
    } = {}) {
      if (!jsonData || !jsonData || !Array.isArray(jsonData) || jsonData.length === 0) {
        return "No se encontraron datos válidos.";
      }
      delete jsonData[0].__v;
      let columnas = Object.keys(jsonData[0])
      columnas = columnas.filter(elemento => elemento !== "_id");
      let tablaHTML = '<div class="table-responsive mt-3"><table  class="table table-striped table-hover table-bordered"><thead id="table_data" ><tr>';

      columnas.forEach((columna) => {
        tablaHTML += `<th>${columna}</th>`;
      });

      if (withActionsCRUD) tablaHTML += '<th>:</th>';

      jsonData.forEach((fila, index) => {
        tablaHTML += `<tr id="${fila._id}">`;
        columnas.forEach((columna) => {
          tablaHTML += `<td class="editable fs-6"  contenteditable="false">${fila[columna]}</td>`; // Bootstrap 5
        });
        if (withActionsCRUD) {
          tablaHTML += `<td>
              <div class="dropdown">
                <button class="btn btn-secondary dropdown-toggle" type="button" id="accionesDropdown${index}" data-bs-toggle="dropdown" aria-expanded="false">
                  :
                </button>
                <ul class="dropdown-menu" aria-labelledby="accionesDropdown${index}">
                  <li><a class="dropdown-item editar" href="#">Editar</a></li>
                  <li><a class="dropdown-item eliminar" href="#">Eliminar</a></li>
                  <li><a class="dropdown-item guardar" href="#">Guardar</a></li>
                </ul>
              </div>
            </td>`;
        }
        tablaHTML += '</tr>';
      });
      tablaHTML += '</tbody></table>';
      tablaHTML += '</div>';
      if (returnTableHtml) return tablaHTML;
      this.container.innerHTML = tablaHTML;
    }

    addRowToTable(jsonData) {
      // Asegurarse de que jsonData sea un objeto y no un array.
      if (typeof jsonData !== 'object' || Array.isArray(jsonData)) {
        return "El dato proporcionado no es un objeto JSON válido.";
      }

      const $tabla = $('#table_data');
      if ($tabla.length === 0) {
        return "Tabla no encontrada.";
      }

      let nuevaFila = `<tr id="${jsonData._id}"> `;
      delete jsonData._id;
      delete jsonData.__v;
      const columnas = Object.keys(jsonData);
      columnas.forEach(columna => {
        nuevaFila += `<td class="editable fs-6">${jsonData[columna]}</td>`; // Añadir las clases como en las otras filas
      });

      // Agregar la celda con el menú desplegable
      nuevaFila += `
        <td>
            <div class="dropdown">
                <button class="btn btn-secondary dropdown-toggle" type="button" id="accionesDropdown${$tabla.find('tbody tr').length}" data-bs-toggle="dropdown" aria-expanded="false">
                  :
                </button>
                <ul class="dropdown-menu" aria-labelledby="accionesDropdown${$tabla.find('tbody tr').length}">
                    <li><a class="dropdown-item editar" href="#">Editar</a></li>
                    <li><a class="dropdown-item eliminar" href="#">Eliminar</a></li>
                    <li><a class="dropdown-item guardar" href="#">Guardar</a></li>
                </ul>
            </div>
        </td>
    `;
      nuevaFila += '</tr>';

      $tabla.append(nuevaFila);
    }

    deleteTable() {
      this.container.innerHTML = " "
    }

  }

  const repoAPI = new RepositoryAPI();
  const tableManager = new TableManager({
    container: "tabla-container"
  });
  let formData = {};
  let status = 0;
  let actualRecord = {}

  $(document).ready(function () {
    //Se encarga de traer los formularios(vistas) para renderizar
    $(document).on('click', '.formulario-link', async function (event) {
      event.preventDefault();
      var typeForm = $(this).attr("id");
      console.log(typeForm);
      let child = $(this).attr("child");
      $.get(`/${typeForm}Form`, { typeForm: typeForm }, function (data) {
        $(child || "#respuesta-container").html(data);
      });
      repoAPI.setCollection(typeForm);
      const response = await repoAPI.getAll();
      console.log(response);
      tableManager.generarTablaDesdeJSON({
        jsonData: response.data
      });
    });

    $(document).on("submit", "#formulario", async function (event) {
      event.preventDefault();
      formData = generateJSONFromInputs({
        form:this
      });
      let formClass = $("#formulario").attr("class");
      repoAPI.setCollection(formClass)
      console.log("DATOS FORM");
      console.log(formClass);
      console.table(formData)
      switch (formClass) {
        case "professor":
          const records = await repoAPI.post({
            name: formData.name,
            email: formData.email,
            ci_number: formData.ci_number
          }, "findAllByParams")
          console.log(records.data.length);
          if (records.data.length != 0) {
            console.log(records);
            status = 1;
            showModal(tableManager.generarTablaDesdeJSON({
              jsonData: records.data,
              withActionsCRUD: false,
              returnTableHtml: true
            }))
          }
          break;
        case "professor/class":
          formData.professor = actualRecord._id;
        case "time/avails":
          formData.professor = actualRecord._id;
        default:
          break;
      }
      return await register();
    });

    $("#tabla-container").on("click", ".editar", function (event) {
      event.preventDefault();
      event.stopPropagation();
      var $row = $(this).closest("tr");
      var rowIndex = $row.index();
      let originalContent = {};
      originalContent[rowIndex] = {};
      $row.find(".editable").each(function () {
        var $cell = $(this);
        var header = $row.closest("table").find("th").eq($cell.index()).text(); // Obtener el texto del encabezado correspondiente a esta celda
        originalContent[rowIndex][header] = $cell.html(); // Almacenar el contenido de la celda usando el texto del encabezado como clave
      });
      $row.find(".editable").attr("contenteditable", "true");
    });

    $("#tabla-container").on("click", ".guardar", async function (event) {
      event.preventDefault();
      event.stopPropagation();
      let $row = $(this).closest("tr");
      let rowId = $row.attr('id');
      let rowIndex = $row.index();
      let newContent = {};
      $row.find(".editable").each(function () {
        let $cell = $(this);
        let header = $row.closest("table").find("th").eq($cell.index()).text();
        newContent[header] = $cell.html();
      });
      const response = await repoAPI.updateByID(newContent, rowId);
      $row.find(".editable").removeAttr("contenteditable");
    });

    $("#tabla-container").on("click", ".eliminar", async function (event) {
      event.preventDefault();
      event.stopPropagation();
      let $row = $(this).closest("tr");
      let rowId = $row.attr('id');
      const response = await repoAPI.deleteByID(rowId);
      console.log(response);
      $(this).closest("tr").remove();
    });

    $("#tabla-container").on("click", "tr", async function (event) {
      var $target = $(event.target);
      if ($target.closest(".dropdown").length) {
        return;
      }
      console.log("Nueva vista");
      try {
        const response = await fetch(`/section/${repoAPI.collection}`);
        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }

        let jsonData = '<div class="json-data card"><div class="card-body"><h5 class="card-title">Docente</h5><ul class="list-group">';
        let $row = $(this).closest("tr");

        $row.find(".editable").each(function () {
          let $cell = $(this);
          let header = $row.closest("table").find("th").eq($cell.index()).text();
          let value = $cell.html();
          console.log(value);
          console.log(header);
          jsonData += `<li class="list-group-item"><strong>${header}:</strong> ${value}</li>`;
        });
        actualRecord = {};
        $row.find(".editable").each(function () {
          let $cell = $(this);
          let header = $row.closest("table").find("th").eq($cell.index()).text();
          actualRecord[header] = $cell.html();
        });
        actualRecord._id =  $row.attr('id');
        
        jsonData += '</ul></div></div>';
        const data = await response.text();
        $("#respuesta-container").html(jsonData + data);

        tableManager.deleteTable()
      } catch (error) {
        console.error(error);
      }
    });

  });


  function showModal(contenido) {
    // Crear el elemento modal
    var modal = $('<div/>', {
      'class': 'modal fade',
      'id': 'miModal',
      'tabindex': '-1',
      'role': 'dialog',
      'aria-labelledby': 'modalLabel',
      'aria-hidden': 'true'
    });

    // Crear la estructura interna del modal
    var modalDialog = $('<div/>', { 'class': 'modal-dialog', 'role': 'document' }).appendTo(modal);
    var modalContent = $('<div/>', { 'class': 'modal-content' }).appendTo(modalDialog);

    // Encabezado del modal
    var modalHeader = $('<div/>', { 'class': 'modal-header' }).appendTo(modalContent);
    $('<h5/>', { 'class': 'modal-title', 'id': 'modalLabel', 'text': 'Datos duplicados' }).appendTo(modalHeader);
    $('<button/>', { 'class': 'close', 'data-dismiss': 'modal', 'aria-label': 'Close' }).html('<span aria-hidden="true">&times;</span>').appendTo(modalHeader);

    // Cuerpo del modal
    $('<div/>', { 'class': 'modal-body', 'html': `${contenido}` }).appendTo(modalContent);

    // Pie del modal
    var modalFooter = $('<div/>', { 'class': 'modal-footer' }).appendTo(modalContent);
    $('<button/>', { 'class': 'btn btn-secondary', 'data-dismiss': 'modal', 'text': 'Cancelar' }).appendTo(modalFooter);
    $('<button/>', { 'class': 'btn btn-primary', 'text': 'Continuar' }).appendTo(modalFooter);

    modal.appendTo('body');
    var customWidth = '80%'; // Puedes ajustar el valor según tus necesidades (p. ej., '600px')
    modalDialog.css('max-width', customWidth);
    var modalDialog = $('.modal-dialog');
    var windowHeight = $(window).height() / 2;
    var dialogHeight = modalDialog.height() / 2;
    var marginTop = (windowHeight - dialogHeight) / 2;
    modalDialog.css('margin-top', marginTop);
    modal.modal('show');
    /*     $(window).on('resize', function () {
          var modalDialog = $('.modal-dialog');
          var windowHeight = $(window).height();
          var dialogHeight = modalDialog.height();
          var marginTop = (windowHeight - dialogHeight) / 2;
          modalDialog.css('margin-top', marginTop);
        }); */
  };

  function generateJSONFromInputs({
  form = "",
}) {
  var formData = {};
  $(form).find(":input").each(function () {
    var fieldName = $(this).attr("name");
    var fieldType = $(this).attr("type");
    if (fieldType === "checkbox" && !$(this).prop("checked")) {
      return; // Ignora los checkboxes no seleccionados
    }
    if (fieldType === "radio" && !$(this).prop("checked")) {
      return; // Ignora los radios no seleccionados
    }
    var fieldValue = $(this).val();
    if (fieldValue) {
      formData[fieldName] = fieldValue;
    }
  });
  return formData;
}


  async function register() {
    if (status !== 0) {
      status = 0;
      return;
    };
    const response = await repoAPI.post(formData);
    tableManager.addRowToTable(response.data);
  }



</script>