<style>
    .bd-placeholder-img {
        font-size: 1.125rem;
        text-anchor: middle;
        -webkit-user-select: none;
        -moz-user-select: none;
        user-select: none;
    }

    @media (min-width: 768px) {
        .bd-placeholder-img-lg {
            font-size: 3.5rem;
        }
    }

    .b-example-divider {
        height: 3rem;
        background-color: rgba(0, 0, 0, .1);
        border: solid rgba(0, 0, 0, .15);
        border-width: 1px 0;
        box-shadow: inset 0 .5em 1.5em rgba(0, 0, 0, .1), inset 0 .125em .5em rgba(0, 0, 0, .15);
    }

    .b-example-vr {
        flex-shrink: 0;
        width: 1.5rem;
        height: 100vh;
    }

    .bi {
        vertical-align: -.125em;
        fill: currentColor;
    }

    .nav-scroller {
        position: relative;
        z-index: 2;
        height: 2.75rem;
        overflow-y: hidden;
    }

    .nav-scroller .nav {
        display: flex;
        flex-wrap: nowrap;
        padding-bottom: 1rem;
        margin-top: -1px;
        overflow-x: auto;
        text-align: center;
        white-space: nowrap;
        -webkit-overflow-scrolling: touch;
    }

    #register-parent {
        height: auto;
    }

    .list-group-item.selected {
        background-color: #7433c4;
        color: #fff;
    }

    .list-group-item.selected.subItem {
        background-color: #a26bea;
        color: #fff;
    }
</style>

<!-- Contenido principal -->
<div class="container mt-4">
    <h2>Generador de Horarios</h2>

    <!-- Carrera Dropdown -->
    <div class="mb-3">
        <label for="carreraSelect" class="form-label">Elegir Carrera:</label>
        <select class="form-select" id="carreraSelect">
            <!-- Opciones de carrera se cargarán dinámicamente -->
        </select>
    </div>

    <!-- Semestre Dropdown -->
    <div class="mb-3" id="semestreContainer">
        <label for="semestreSelect" class="form-label">Elegir Semestre:</label>
        <select class="form-select" id="semestreSelect">
            <!-- Opciones de semestre se cargarán dinámicamente -->
        </select>
    </div>

    <!-- Número de Grupos Input -->
    <div class="mb-3" id="gruposContainer">
        <label for="gruposInput" class="form-label">Número de Grupos:</label>
        <input type="number" class="form-control" id="gruposInput">
    </div>

    <!-- Botón Generar Horario -->
    <button class="btn btn-primary" id="generarHorarioBt">Generar Horario</button>

    <!-- HORARIOS GENERADOS -->
    <div style="margin-top: 50px;">
        <h3>HORARIOS GENERADOS</h3>
        <div id="horariosGeneradosContainer"></div>
    </div>

    <!-- Resultados o mensajes se mostrarán aquí -->
    <div id="showSchedule" style="margin-top: 20px;"></div>
</div>

<script>

    $(document).on('click', '.formulario-link', async function (event) {
        event.preventDefault();
        var typeForm = $(this).attr("id");
        let child = $(this).attr("child");
        repoAPI.setCollection(typeForm);
  
        $.get(`/${typeForm}Form`, { typeForm: typeForm }, function (data) {
          const form = new Form({
            formHtml: data,
            group: typeForm,
            container: child || "#respuesta-container"
          })
          form.initializeEventSubmit(async function (event)  {
            event.preventDefault();
            formData = form.generateJSONFromInputs({
              form: this
            });
  
            switch (form.class) {
              case "professor":
                const records = await repoAPI.post({
                  name: formData.name,
                  email: formData.email,
                  ci_number: formData.ci_number
                }, "findAllByParams")
                
                if (records.data.length != 0) {
                  status = 1;
                  new Modal(tableManager.generarTablaDesdeJSON({
                    jsonData: records.data,
                    withActionsCRUD: false,
                    returnTableHtml: true
                  }))
                }
                break;
              case "professor/class":
                formData.professor = actualRecord._id;
              case "time/avails":
                formData.professor = actualRecord._id;
              default:
                break;
            }
            if (status !== 0) {
              status = 0;
              return;
            };
            const response = await repoAPI.post(formData);
            tableManager.addRowToTable(response.data);
          });
          form.render();
        });
  
        const response = await repoAPI.getAll();
        tableManager.generarTablaDesdeJSON({
          jsonData: response.data
        });
      });
</script>