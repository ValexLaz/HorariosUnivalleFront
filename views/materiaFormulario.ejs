<form id="formulario" class="class" action="/agregar-materia" method="POST">
    <div class="mb-3">
        <label for="name" class="form-label">Nombre</label>
        <input type="text" class="form-control" id="name" name="name" required>
    </div>
    <div class="mb-3">
        <label for="description" class="form-label">Descripción</label>
        <textarea class="form-control" id="description" name="description" rows="4" required></textarea>
    </div>
    <div class="mb-3">
        <label for="hours_demanded" class="form-label">Horas de Trabajo</label>
        <input type="number" class="form-control" id="hours_demanded" name="hours_demanded" required>
    </div>
    <!-- University Program Selection -->
    <div class="mb-3">
        <label for="id_class" class="form-label">Progrmas Universitarios (Carreras)</label>
        <select class="form-select" dependency="semester" id="uniPrograms" name="university_program" required>
            <option value="null">Seleccione una opcion</option>
        </select>
    </div>
     <!-- Semester Selection -->
    <div class="mb-3">
        <label for="id_semester" class="form-label">Semestre</label>
        <select class="form-select" id="semester" name="semester" disabled  required>
            <option value="1">Elije un semestre</option>
        </select>
    </div>
    <button type="submit" class="btn btn-primary">Agregar Algo</button>
</form>
<script type="module">
    import RepositoryAPI from './js/RepositoryAPI.js';
    const repoAPI = new RepositoryAPI('semester');

    async function getDetailsByProgramUniversity() {
        repoAPI.setCollection('uniPrograms')
        const response = await repoAPI.getAll();
        const selectContainer = $("#formulario").find("#uniPrograms");
        console.log(response.data);
        response.data.forEach(UniProgram => {
            const option = $('<option>').attr({
                value: UniProgram._id
            }).text(`${UniProgram.name}`);
            selectContainer.append(option);
        });

    }
    async function loadSectionOfSelection(container,data) {
        $("#formulario").find(`#${container}`).prop('disabled', false);
        const selectContainer = $("#formulario").find(`#${container}`);
        selectContainer.find('option:not(:first-child)').remove();
        data.forEach(campo => {
            const option = $('<option>').attr({
                value: campo._id
            }).text(`${campo.name}`);
            selectContainer.append(option);
        });
    }

    $(document).ready(async function () {
        console.log("Document Ready");
        await getDetailsByProgramUniversity()

        $('.form-select').on('change', async function () {
            var selectedOption = $(this).val();
            let collection = $(this).attr('dependency');
            let endpoint = $(this).attr('id');

            repoAPI.setCollection(collection);
            const response = await repoAPI.get(endpoint,selectedOption);
            await loadSectionOfSelection(collection,response.data);
        });
    });

</script>
<script>
    // Función para vaciar el formulario y mostrar el mensaje de guardado
    function vaciarFormularioMostrarMensaje() {
      // Vaciar el formulario
      document.getElementById("formulario").reset();
 
      // Mostrar el mensaje de guardado correctamente
      const mensaje = document.createElement('div');
      mensaje.textContent = 'Guardado correctamente';
      mensaje.style.cssText = 'position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: rgba(0, 255, 0, 0.7); padding: 20px; border-radius: 8px; color: black; display: none;';
      document.body.appendChild(mensaje);
 
      mensaje.style.display = 'block';
      setTimeout(function() {
        mensaje.style.display = 'none';
      }, 3000); // Ocultar el mensaje después de 3 segundos (ajusta según sea necesario)
    }
 
    // Función para ejecutar la lógica de guardado
    function guardarDatos() {
      // Aquí iría tu lógica de guardado, por ejemplo, una llamada a tu API o proceso de almacenamiento
   
      // Una vez que hayas realizado tu lógica de guardado, puedes vaciar el formulario y mostrar el mensaje
      vaciarFormularioMostrarMensaje();
    }
 
    // Evento que se dispara al enviar el formulario
    document.getElementById("formulario").addEventListener("submit", function(event) {
      event.preventDefault(); // Evitar el envío predeterminado del formulario
   
      // Llamar a la función para guardar después de un breve retraso
      setTimeout(guardarDatos, 100); // Ejecutar la lógica de guardado después de 100 milisegundos
    });
  </script>